/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Favoris } from "./Favoris";
import { FavorisCountArgs } from "./FavorisCountArgs";
import { FavorisFindManyArgs } from "./FavorisFindManyArgs";
import { FavorisFindUniqueArgs } from "./FavorisFindUniqueArgs";
import { CreateFavorisArgs } from "./CreateFavorisArgs";
import { UpdateFavorisArgs } from "./UpdateFavorisArgs";
import { DeleteFavorisArgs } from "./DeleteFavorisArgs";
import { PanierMystere } from "../../panierMystere/base/PanierMystere";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { FavorisService } from "../favoris.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Favoris)
export class FavorisResolverBase {
  constructor(
    protected readonly service: FavorisService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Favoris",
    action: "read",
    possession: "any",
  })
  async _favorisesMeta(
    @graphql.Args() args: FavorisCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Favoris])
  @nestAccessControl.UseRoles({
    resource: "Favoris",
    action: "read",
    possession: "any",
  })
  async favorises(
    @graphql.Args() args: FavorisFindManyArgs
  ): Promise<Favoris[]> {
    return this.service.favorises(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Favoris, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Favoris",
    action: "read",
    possession: "own",
  })
  async favoris(
    @graphql.Args() args: FavorisFindUniqueArgs
  ): Promise<Favoris | null> {
    const result = await this.service.favoris(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Favoris)
  @nestAccessControl.UseRoles({
    resource: "Favoris",
    action: "create",
    possession: "any",
  })
  async createFavoris(
    @graphql.Args() args: CreateFavorisArgs
  ): Promise<Favoris> {
    return await this.service.createFavoris({
      ...args,
      data: {
        ...args.data,

        panierMystere: args.data.panierMystere
          ? {
              connect: args.data.panierMystere,
            }
          : undefined,

        utilisateur: args.data.utilisateur
          ? {
              connect: args.data.utilisateur,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Favoris)
  @nestAccessControl.UseRoles({
    resource: "Favoris",
    action: "update",
    possession: "any",
  })
  async updateFavoris(
    @graphql.Args() args: UpdateFavorisArgs
  ): Promise<Favoris | null> {
    try {
      return await this.service.updateFavoris({
        ...args,
        data: {
          ...args.data,

          panierMystere: args.data.panierMystere
            ? {
                connect: args.data.panierMystere,
              }
            : undefined,

          utilisateur: args.data.utilisateur
            ? {
                connect: args.data.utilisateur,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Favoris)
  @nestAccessControl.UseRoles({
    resource: "Favoris",
    action: "delete",
    possession: "any",
  })
  async deleteFavoris(
    @graphql.Args() args: DeleteFavorisArgs
  ): Promise<Favoris | null> {
    try {
      return await this.service.deleteFavoris(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PanierMystere, {
    nullable: true,
    name: "panierMystere",
  })
  @nestAccessControl.UseRoles({
    resource: "PanierMystere",
    action: "read",
    possession: "any",
  })
  async getPanierMystere(
    @graphql.Parent() parent: Favoris
  ): Promise<PanierMystere | null> {
    const result = await this.service.getPanierMystere(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Utilisateur, {
    nullable: true,
    name: "utilisateur",
  })
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "read",
    possession: "any",
  })
  async getUtilisateur(
    @graphql.Parent() parent: Favoris
  ): Promise<Utilisateur | null> {
    const result = await this.service.getUtilisateur(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
