/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PanierMystere as PrismaPanierMystere,
  Favoris as PrismaFavoris,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class PanierMystereServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PanierMystereCountArgs, "select">
  ): Promise<number> {
    return this.prisma.panierMystere.count(args);
  }

  async panierMysteres<T extends Prisma.PanierMystereFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PanierMystereFindManyArgs>
  ): Promise<PrismaPanierMystere[]> {
    return this.prisma.panierMystere.findMany<Prisma.PanierMystereFindManyArgs>(
      args
    );
  }
  async panierMystere<T extends Prisma.PanierMystereFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PanierMystereFindUniqueArgs>
  ): Promise<PrismaPanierMystere | null> {
    return this.prisma.panierMystere.findUnique(args);
  }
  async createPanierMystere<T extends Prisma.PanierMystereCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PanierMystereCreateArgs>
  ): Promise<PrismaPanierMystere> {
    return this.prisma.panierMystere.create<T>(args);
  }
  async updatePanierMystere<T extends Prisma.PanierMystereUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PanierMystereUpdateArgs>
  ): Promise<PrismaPanierMystere> {
    return this.prisma.panierMystere.update<T>(args);
  }
  async deletePanierMystere<T extends Prisma.PanierMystereDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PanierMystereDeleteArgs>
  ): Promise<PrismaPanierMystere> {
    return this.prisma.panierMystere.delete(args);
  }

  async findFavorises(
    parentId: string,
    args: Prisma.FavorisFindManyArgs
  ): Promise<PrismaFavoris[]> {
    return this.prisma.panierMystere
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .favorises(args);
  }

  async getRestaurant(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.panierMystere
      .findUnique({
        where: { id: parentId },
      })
      .restaurant();
  }
}
