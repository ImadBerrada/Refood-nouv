/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Paiement } from "./Paiement";
import { PaiementCountArgs } from "./PaiementCountArgs";
import { PaiementFindManyArgs } from "./PaiementFindManyArgs";
import { PaiementFindUniqueArgs } from "./PaiementFindUniqueArgs";
import { CreatePaiementArgs } from "./CreatePaiementArgs";
import { UpdatePaiementArgs } from "./UpdatePaiementArgs";
import { DeletePaiementArgs } from "./DeletePaiementArgs";
import { PaiementService } from "../paiement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Paiement)
export class PaiementResolverBase {
  constructor(
    protected readonly service: PaiementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Paiement",
    action: "read",
    possession: "any",
  })
  async _paiementsMeta(
    @graphql.Args() args: PaiementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Paiement])
  @nestAccessControl.UseRoles({
    resource: "Paiement",
    action: "read",
    possession: "any",
  })
  async paiements(
    @graphql.Args() args: PaiementFindManyArgs
  ): Promise<Paiement[]> {
    return this.service.paiements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Paiement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Paiement",
    action: "read",
    possession: "own",
  })
  async paiement(
    @graphql.Args() args: PaiementFindUniqueArgs
  ): Promise<Paiement | null> {
    const result = await this.service.paiement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Paiement)
  @nestAccessControl.UseRoles({
    resource: "Paiement",
    action: "create",
    possession: "any",
  })
  async createPaiement(
    @graphql.Args() args: CreatePaiementArgs
  ): Promise<Paiement> {
    return await this.service.createPaiement({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Paiement)
  @nestAccessControl.UseRoles({
    resource: "Paiement",
    action: "update",
    possession: "any",
  })
  async updatePaiement(
    @graphql.Args() args: UpdatePaiementArgs
  ): Promise<Paiement | null> {
    try {
      return await this.service.updatePaiement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Paiement)
  @nestAccessControl.UseRoles({
    resource: "Paiement",
    action: "delete",
    possession: "any",
  })
  async deletePaiement(
    @graphql.Args() args: DeletePaiementArgs
  ): Promise<Paiement | null> {
    try {
      return await this.service.deletePaiement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
